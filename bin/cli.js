#!/usr/bin/env node

const dejsc = require('../index');
const pkg_json = require('../package.json');
const path = require('path');
const fs = require('fs');
const bytenode = require('bytenode')

const program = require('commander');

program
    .version(`dejsc v${pkg_json.version} with nodejs ${process.version}`,
        '-v, --version', 'output the current version')
    .description("A tool to decompile V8 bytecodes generated by bytenode.")

program
    .command('run <file>')
    .description("run bytecode file, and show results on console.")
    .option('-x, --export', 'show module exports of bytecode file to console.')
    .option('--export-json', 'use json format to stringify module exports.')
    .option('-f, --fix', 'fix data header of bytecode to fit current nodejs.')
    .action(function(file, cmdRun) {
        // Check file
        filename = path.resolve(file);
        if (!(fs.existsSync(filename) && fs.statSync(filename).isFile())) {
            console.error(`Error: Cannot find file '${filename}'.`);
        }
        // Read buffer
        let bytecodeBuffer = dejsc.readBytecodeFile(filename);
        if (cmdRun.fix) {
            dejsc.fixBytecode(bytecodeBuffer)
        }

        // Run bytecode
        let result = dejsc.runBytecode(bytecodeBuffer)
        if (cmdRun.export || cmdRun.exportJson) {
            let fakeModule = {};
            fakeModule.exports = {};
            result(fakeModule.exports, require, fakeModule, __filename, __dirname);
            if (cmdRun.exportJson) {
                process.stdout.write(JSON.stringify(fakeModule.exports));
            } else {
                console.log(fakeModule.exports);
            }
        } else {
            console.log(result);
        }
    })

program
    .command("compile <src> [dest]")
    .description("compile javascript source code into bytecodes.")
    .action(function(src, dest, cmdCompile) {
        // Check file
        filename = path.resolve(file);
        if (!(fs.existsSync(filename) && fs.statSync(filename).isFile())) {
            console.error(`Error: Cannot find file '${filename}'.`);
        }

        // Compile javascript source code
        let javascriptCode = fs.readFileSync(filename, 'utf-8');
        let bytecodeBuffer = bytenode.compileCode(javascriptCode);
        if (cmdCompile.dest) {
            fs.writeFileSync(dest, bytecodeBuffer);
        } else {
            process.stdout.write(bytecodeBuffer);
        }
    })

program
    .command("show <file>")
    .description("analyze bytecode format.")
    .option('--data-header', "show data header of bytecodes.")
    .action(function(file, cmdShow) {
        // Check file
        filename = path.resolve(file);
        if (!(fs.existsSync(filename) && fs.statSync(filename).isFile())) {
            console.error(`Error: Cannot find file '${filename}'.`);
        }

        let bytecodeBuffer = dejsc.readBytecodeFile(filename);
        if (cmdShow.dataHeader) {
            let header = dejsc.readDataHeader(bytecodeBuffer);
            console.log(header);
        }
    })

program.parse(process.argv);